[0m[[0m[0mdebug[0m] [0m[0m> Exec(__runWatch console0, Some(c77d494d-a40f-4d67-b5c7-459aaa841189), Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(sbtStashOnFailure, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(__preWatch console0, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(test, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Test / test[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to /Users/viki/Desktop/UNI/MASTER_cbs/3rdSemester/Advanced_Programming_Scala/2021-adpro/070-testing/target/scala-2.13/test-classes ...[0m
[0m[[0m[0minfo[0m] [0m[0m[32mStreamSpec:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mheadOption[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- returns None on an empty Stream (01)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- returns the head of a singleton stream packaged in Some (02)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- returns the head of random stream packaged in Some (02)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- does not force the tail of the stream[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mtake[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- take does not force the tail or head of the stream[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- take(n) does not force the (n+1)st head ever[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- s.take(n).take(n) ==s.take(n) for any stream s and any n[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mdrop[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- s.drop(n).drop(m) ==s.drop(n+m) for any n, m[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- s.drop(n) does not force any of the dropped elements heads[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mmap[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- x.map(id) ==x for any stream. Here id is the identity function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- map terminates on infinite streams[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mappend[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- append to stream does not change its head[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- appending empty stream should result in the same stream[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- append should terminate when appending infinite stream[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- appending two empty streams should result in empty stream[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- by appending two streams of size k and l we get a stream of size (k + l)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mRun completed in 567 milliseconds.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTotal number of tests run: 16[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mSuites: completed 1, aborted 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTests: succeeded 16, failed 0, canceled 0, ignored 0, pending 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAll tests passed.[0m[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 3 s, completed 26. 10. 2021 16:53:04[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(resumeFromFailure, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(sbtPopOnFailure, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(__postWatch console0, None, Some(CommandSource(console0)))[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(resumeFromFailure, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(__waitWatch console0, None, None)[0m
[0m[[0m[0minfo[0m] [0m[0mshutting down sbt server[0m
